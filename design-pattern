create structure tree of parser                       |
0:parser0 --> 1:parser1                               \
          --> 1:parser2 --> 2:parser4                  } decorator pattern
                        --> 2:parser5                 /
          --> 1:parser3                               |
0-------------1-------------2--------                 \
parser0       parser1       parser4                    }   state   pattern
              parser2       parser5                    }  observer pattern
              parser3                                 /

registry    --> register parser in action of current depth        |
            --> resolve parsing step-by-step                      |
            --> if current node return null                       |
                destroy whole follow branch                       |
                                                                  |
logger      --> log the parse result into storage                 \
                                                                   } helpers
url-crawler --> make url in need and follow url                   /
                at the end of parsing period                      |
                                                                  |
filter      --> filter parsing result for any condition given     |
                                                                  |
builder     --> build the object structure based on array         |

multiple type of parsers                              |
base-parser --> mono-parser --> regex-mono-parser     \
                            --> xpath-mono-parser      }  factory  pattern
            --> multi-parser--> regex-multi-parser    /
                            --> xpath-multi-parser    |

composite pattern = wireframe (mono/multi) + parser (regex/xpath)

function buildNodes(array $structure) {
  $nodes = [];
  foreach ($structure as $option => $nextNodes) {
    $node = Node::createFromOption($option);

    if (is_array($nextNodes)) {
      foreach ($this->buildNodes as $nextNode) {
        $node->pipe($nextNode);
      }
    }
    
    
  }
}

$structure = [
  '{#regex#}{none}{mono}' => [
    '{#regex#}{summary}{mono}' => [
      '{#regex#}{name}{mono}' => 'end',
      '{#regex#}{price}{mono}' => 'end',
    ],
    '{#regex#}{description}{mono}' => 'end',
    '{#regex#}{images}{multi}' => 'end',
    '{#regex#}{user}{mono}' => [
      '{#regex#}{name}{mono}' => 'end',
      '{#regex#}{email}{mono}' => 'end',
      '{#regex#}{phone}{mono}' => 'end',
      '{#regex#}{info}{mono}' => 'trunk'
    ],
  ],
];